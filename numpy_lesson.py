import numpy as np

# Что такое NumPy?
# NumPy — это библиотека Python, предоставляющая поддержку для больших многомерных массивов и матриц, вместе с коллекцией математических функций, для работы с ними.
# Зачем он нужен?
# NumPy позволяет эффективно работать с массивами данных и выполнять на них математические операции, что делает его необходимым инструментом для научных вычислений и анализа данных.
# Преимущества использования NumPy перед встроенными структурами данных Python:
# - Высокая производительность благодаря оптимизированным операциям на массивах.
# - Удобный синтаксис для работы с многомерными данными.
# - Множество встроенных функций для работы с массивами.

# Установка с помощью pip:
# pip install numpy


# Основные структуры данных NumPy
# Массивы (ndarray).
# Основные атрибуты массивов: размерность, форма, тип данных.

# Создание массива
arr = np.array([1, 2, 3])
print("Исходный массив:", arr)

# Добавление элементов
arr = np.append(arr, [4, 5])
print("После добавления элементов с np.append():", arr)

arr = np.insert(arr, 1, [10, 20])
print("После вставки элементов с np.insert():", arr)

arr1 = np.array([1, 2, 3])
arr2 = np.array([4, 5, 6])
arr = np.concatenate((arr1, arr2))
print("После объединения массивов с np.concatenate():", arr)

# Удаление элементов
arr = np.array([1, 2, 3, 4, 5])
arr = np.delete(arr, [1, 3])
print("После удаления элементов с np.delete():", arr)

# Изменение элементов
arr = np.array([1, 2, 3, 4, 5])
arr[2] = 10  # Изменяем элемент по индексу 2
print("После изменения одного элемента:", arr)

arr[1:4] = [20, 30, 40]  # Изменяем элементы по индексам с 1 по 3 включительно
print("После изменения нескольких элементов:", arr)

# Использование функций для создания специфичных массивов:
# Нулевые массивы, единичные массивы, массивы со случайными значениями.
zeros_arr = np.zeros((3, 3))
print("Нулевой массив:")
print(zeros_arr)

ones_arr = np.ones((2, 2))
print("Единичный массив:")
print(ones_arr)

random_arr = np.random.rand(2, 2)
print("Массив со случайными значениями:")
print(random_arr)

# Функции arange и linspace
# Функция arange создает массив с равномерно разнесенными значениями в заданном интервале.
arr_range = np.arange(0, 10, 2)  # от 0 (включая) до 10 (не включая), с шагом 2
print("Массив с использованием функции arange:")
print(arr_range)

# Индексирование и срезы
# Одномерные и многомерные массивы.
# Базовые операции индексирования и срезов.
print("Индексирование и срезы:")
print("Первый элемент:", arr[0])
print("Срез:", arr[1:4])

# Применение условных операций для выбора элементов массива.
mask = arr > 3
print("Элементы больше 3:", arr[mask])

# Операции с массивами
# Арифметические операции
# Поэлементные операции.
arr1 = np.array([[1, 2], [3, 4]])
arr2 = np.array([[5, 6], [7, 8]])
print("Поэлементное сложение:")
print(arr1 + arr2)  # [[arr1[0][0] + arr2[0][0], arr1[0][1] + arr2[0][1]], [arr1[1][0] + arr2[1][0], arr1[1][1] + arr2[1][1]]]

# Универсальные функции (ufunc)
# Определение универсальных функций.
# Примеры функций: np.sin, np.cos, np.exp и т.д.
print("Примеры универсальных функций:")
print("np.sin:", np.sin(arr1))
print("np.exp:", np.exp(arr1))

# Агрегирование и статистика
# Вычисление суммы, минимума, максимума, среднего и т.д.
print("Сумма всех элементов:", np.sum(arr1))
print("Минимум:", np.min(arr1))
print("Максимум:", np.max(arr1))
print("Среднее:", np.mean(arr1))

# Изменение формы массивов
# Изменение размерности массивов.
arr3 = np.array([1, 2, 3, 4, 5, 6])
reshaped_arr = np.reshape(arr3, (2, 3)) # В данном случае, arr3 - одномерный массив из 6 элементов, а (2, 3) указывает на желаемую форму (2 строки и 3 столбца).
print("Переформированный массив:")
print(reshaped_arr)

resized_arr = np.resize(arr3, (3, 2))
print("Измененный размер массива:")
print(resized_arr)


# Индексирование массивов
# Индексирование с использованием массивов целых чисел.
arr4 = np.array([10, 20, 30, 40, 50])
indices = np.array([0, 2, 3])
print("Индексирование с помощью массива целых чисел:")
print(arr4[indices])

# Использование булевых массивов для индексации.
bool_mask = np.array([True, False, True, False, True])
print("Использование булевых массивов для индексации:")
print(arr4[bool_mask])

# Сортировка массивов
# Сортировка по значениям в массиве.
arr5 = np.array([3, 1, 2])
print("Отсортированный массив:")
print(np.sort(arr5))

# Сортировка по осям.
arr6 = np.array([[9, 4], [3, 7]])
# Функция np.sort используется для сортировки массива по указанной оси.
# Параметр axis определяет ось, по которой будет происходить сортировка:
# - axis=0 означает сортировку по столбцам (по вертикали).
# - axis=1 означает сортировку по строкам (по горизонтали).
sorted_arr_axis0 = np.sort(arr6, axis=0)
sorted_arr_axis1 = np.sort(arr6, axis=1)
print("Отсортированный массив по осям (по столбцам):")
print(sorted_arr_axis0)
print("Отсортированный массив по осям (по строкам):")
print(sorted_arr_axis1)

# Работа с файлами
# Сохраняем массив arr6 в файл 'data.txt' с разделителем ','.
np.savetxt('data.txt', arr6, delimiter=',')
# Загружаем данные из файла 'data.txt' с помощью np.loadtxt.
# Указываем разделитель ',' для корректного чтения данных.
loaded_data = np.loadtxt('data.txt', delimiter=',')
# Выводим загруженные данные на экран.
print("Загруженные данные из файла:")
print(loaded_data)


# умножение матриц
mat1 = np.array([[1, 2], [3, 4]])
mat2 = np.array([[5, 6], [7, 8]])
print(mat1)
print(mat2)
# [[1*5 + 2*7, 1*6 + 2*8],
#  [3*5 + 4*7, 3*6 + 4*8]]
mat_mult = np.dot(mat1, mat2)
print("Умножение матриц:")
print(mat_mult)
